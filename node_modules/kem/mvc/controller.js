var querystring = require('querystring'), 
	fs = require('fs'), 
	is = require('../lib/is'), 
	dev = require('../index.js').define.dev, 
	View = require('./view.js'), 
	Cookie = require('../lib/cookie/server.js'),
	view = null, static_data = {};

module.exports = class Reply {
	constructor(req, res, query, buffer) {
		this.data = { 
			query: query, 
			bin: buffer || '{}', 
			status: 200,
			header: {'Content-Type': 'text/html'}
		};
		this.req = req;
		this.res = res;
	}

	status(code){
		this.data.status = code;
		return this;
	}
	message(message){
		this.data.message = message;
		return this;
	}
	header(name, value){
		switch(typeof(name)){
			case 'string':
				if(undefined === value) return this.res.getHeader(name);
				else this.data.header[name] = value;
				break;
			case 'object':
				Object.assign(this.data.header, name);
				break;
		}
		return this;
	}

	error(){
		return this.json({ error: true, message: null });
	}
	json(array){
		this.data.header['Content-Type'] = 'application/json';
		this.end(JSON.stringify(array));
	}
	html(file, data){
		view = new View(file, data);
		this.end(view.html());
	}
	end(buffer){
		this.res.writeHead(this.data.status, this.data.header);
		this.res.end(buffer);
	}

	get cookie(){
		if(!this.data.cookie) this.data.cookie = new Cookie(this.req.headers.cookie, this.res);
		return this.data.cookie;
	}

	get query(){
		return this.data.query;
	}
	get body(){
		if(!this.data.body) this.data.body = JSON.parse(this.data.bin);
		return this.data.body;
	}
	get bin(){
		return this.data.bin;
	}
}