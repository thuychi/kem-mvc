var fs = require('fs'), load = require('../load.js');

module.exports = class View {
	constructor(file, data) {
		this.data = data || {};
		this.text = fs.readFileSync(load.view(file.replace(/\./g, '/')), 'utf8').replace(/[\r\t\n]/g, '');
		this.init();
	}

	set(key, value) {
		switch (typeof key) {
			case 'function':
				this.data[key] = value();return;
			case 'object':
				for (var i in key) {
					this.data[i] = key[i];
				};
				return;
			case 'string':
				this.data[key] = value;return;
		}
	}

	parse() {
		var re = /\{\{(.+?)\}\}/g,
		    reExp = /(^( )?(var|if|for|else|else\sif|switch|function|return|case|break|{|}|,|;|\(|\)))(.*)?/g,
		    code = 'with(obj) { var r=[];',
		    html = this.text,
		    cursor = 0,
		    match;
		var add = function (line, js) {
			js ? code += line.match(reExp) ? line : "r.push(" + line + ");" : code += line != "" ? "r.push('" + line.replace(/'/g, '"') + "');" : "";
			return add;
		};
		while (match = re.exec(html)) {
			add(html.slice(cursor, match.index))(match[1], true);
			cursor = match.index + match[0].length;
		};
		add(html.substr(cursor, html.length - cursor));
		return code + "return r.join('');}";
	}

	init() {
		var self = this;
		this.set('use', function (file) {
			var view = new View(file, self.data);
			return view.html();
		});
		this.set('require', function (file) {
			return require(file);
		});
		this.set('set', function (key, value) {
			self.data[key] = value;
		});
		this.set('get', function (key) {
			return self.data[key];
		});
	}

	html() {
		return new Function('obj', this.parse()).apply(this.data, [this.data]);
	}
}